#!/bin/bash

echo "ControlR support script starting ..."

if [ "$1" ]; then
	SERVER=$1
else
	SERVER_DEFAULT="Tower"
	read -p "Enter server name/address [$SERVER_DEFAULT]: " SERVER
	SERVER=${SERVER:-$SERVER_DEFAULT}
fi
# echo "SERVER is $SERVER"

if [ "$2" ]; then
	PORT=$2
else
	PORT_DEFAULT="80"
	read -p "Enter server port [$PORT_DEFAULT]: " PORT
	PORT=${PORT:-$PORT_DEFAULT}
fi
# echo "PORT is $PORT"

if [ "$3" ]; then
	PROTO=$3
else
	PROTO_DEFAULT="http"
	read -p "Enter protocol [$PROTO_DEFAULT]: " PROTO
	PROTO=${PROTO:-$PROTO_DEFAULT}
fi

URL="$PROTO://$SERVER:$PORT"
# if [ "$PORT" -ne "80" ]; then
# 	HTTP="$HTTP:$PORT"
# fi
#echo "HTTP is $HTTP"

stty -echo
read -p "Server password [none]: " PWD; echo
stty echo

AUTH="root"
if [ -n "$PWD" ]; then
	AUTH="root:$PWD"
fi

API="https://$SERVER:2382"

rm -rf controlrs
mkdir controlrs
pushd controlrs

# get files
curl -X GET -k -u "$AUTH" "$URL/" -o index.html
curl -X GET -k -u "$AUTH" "$URL/Dashboard" -o dashboard.html
curl -X GET -k -u "$AUTH" "$URL/Docker" -o docker.html
curl -X GET -k -u "$AUTH" "$URL/VMs" -o vms.html
curl -X GET -k -u "$AUTH" "$API/api/v1/info" -o api.html
curl -X GET -k -u "$AUTH" "$URL/plugins/dynamix.docker.manager/include/DockerContainers.php" -o docker65.html
curl -X GET -k -u "$AUTH" "$URL/plugins/dynamix.vm.manager/include/VMMachines.php" -o vms65.html
curl -X GET -k -u "$AUTH" "$URL/state/var.ini" -o var.ini
curl -X GET -k -u "$AUTH" "$URL/state/disks.ini" -o disks.ini
curl -X GET -k -u "$AUTH" "$URL/state/shares.ini" -o shares.ini
curl -X GET -k -u "$AUTH" "$URL/state/users.ini" -o users.ini
curl -X GET -k -u "$AUTH" "$URL/state/cpuload.ini" -o cpuload.ini

TOKEN=$(curl -X GET -k -u "$AUTH" "$URL/state/var.ini" | grep -Po 'csrf_token="\K.*?(?=")')
curl -X POST -k -u "$AUTH" -d "action=get_content_json&csrf_token=${TOKEN}" "$URL/plugins/unassigned.devices/UnassignedDevices.php" -o udev.json

# remove registration info
awk '!/regFILE=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regGUID=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regTy=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regTo=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regTm=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regTm2=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/regGen=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/flashGUID=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/flashProduct=/' var.ini > var.tmp && mv var.tmp var.ini
awk '!/flashVendor=/' var.ini > var.tmp && mv var.tmp var.ini

# remove disks serial info
sed -i -E 's/id=\"(.*?)\"/id=\"generic\"/g' disks.ini
sed -i -E 's/idSb=\"(.*?)\"/idSb=\"generic\"/g' disks.ini
sed -i -E 's/\"serial\":\"[^"]+\"/\"serial\":\"ugeneric\"/g' udev.json
sed -i -E 's/\"serial_short\":\"[^"]+\"/\"serial_short\":\"ugeneric\"/g' udev.json

popd

# create zip file
zip -r controlr.zip controlrs

echo "ControlR support script finished"
echo "Please send controlr.zip to the support email"
